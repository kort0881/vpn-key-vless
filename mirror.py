#!/usr/bin/env python3
# mirror_with_sni.py
# –°–∫—Ä–∏–ø—Ç: –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ + –ø–æ–ø—ã—Ç–∫–∏ –æ–±—Ö–æ–¥–∞ (SNI / IP + Host) + —Å–±–æ—Ä 26-–≥–æ —Ñ–∞–π–ª–∞
# –¢—Ä–µ–±—É–µ—Ç: requests, PyGithub
# –ó–∞–¥–∞–π—Ç–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏: MY_TOKEN (GitHub token —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π kort0881/vpn-key-vless)

import os
import re
import time
import socket
import base64
import json
import urllib.parse
import urllib3
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from github import Github, Auth, GithubException
from datetime import datetime
import zoneinfo
from collections import defaultdict

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ --------------------
REPO_NAME = "kort0881/vpn-key-vless"
GITHUB_TOKEN = os.environ.get("MY_TOKEN")  # <- —É–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ –∑–∞–¥–∞–Ω–æ –≤ secrets/ENV
LOCAL_DIR = "githubmirror"
os.makedirs(LOCAL_DIR, exist_ok=True)

# –¢–∞–π–º–∞—É—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
TIMEOUT = 12
RETRIES = 2
REQUESTS_POOL = 10

# User-Agent
CHROME_UA = ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
             "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36")

# -------------------- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (1..25) --------------------
URLS = [
    "https://github.com/sakha1370/OpenRay/raw/refs/heads/main/output/all_valid_proxies.txt",
    "https://raw.githubusercontent.com/sevcator/5ubscrpt10n/main/protocols/vl.txt",
    "https://raw.githubusercontent.com/yitong2333/proxy-minging/refs/heads/main/v2ray.txt",
    "https://raw.githubusercontent.com/acymz/AutoVPN/refs/heads/main/data/V2.txt",
    "https://raw.githubusercontent.com/miladtahanian/V2RayCFGDumper/refs/heads/main/config.txt",
    "https://raw.githubusercontent.com/roosterkid/openproxylist/main/V2RAY_RAW.txt",
    "https://github.com/Epodonios/v2ray-configs/raw/main/Splitted-By-Protocol/trojan.txt",
    "https://raw.githubusercontent.com/YasserDivaR/pr0xy/refs/heads/main/ShadowSocks2021.txt",
    "https://raw.githubusercontent.com/mohamadfg-dev/telegram-v2ray-configs-collector/refs/heads/main/category/vless.txt",
    "https://raw.githubusercontent.com/mheidari98/.proxy/refs/heads/main/vless",
    "https://raw.githubusercontent.com/youfoundamin/V2rayCollector/main/mixed_iran.txt",
    "https://raw.githubusercontent.com/mheidari98/.proxy/refs/heads/main/all",
    "https://github.com/Kwinshadow/TelegramV2rayCollector/raw/refs/heads/main/sublinks/mix.txt",
    "https://github.com/LalatinaHub/Mineral/raw/refs/heads/master/result/nodes",
    "https://raw.githubusercontent.com/miladtahanian/multi-proxy-config-fetcher/refs/heads/main/configs/proxy_configs.txt",
    "https://raw.githubusercontent.com/Pawdroid/Free-servers/refs/heads/main/sub",
    "https://github.com/MhdiTaheri/V2rayCollector_Py/raw/refs/heads/main/sub/Mix/mix.txt",
    "https://github.com/Epodonios/v2ray-configs/raw/main/Splitted-By-Protocol/vmess.txt",
    "https://github.com/MhdiTaheri/V2rayCollector/raw/refs/heads/main/sub/mix",
    "https://raw.githubusercontent.com/mehran1404/Sub_Link/refs/heads/main/V2RAY-Sub.txt",
    "https://raw.githubusercontent.com/shabane/kamaji/master/hub/merged.txt",
    "https://raw.githubusercontent.com/wuqb2i4f/xray-config-toolkit/main/output/base64/mix-uri",
    "https://raw.githubusercontent.com/AzadNetCH/Clash/refs/heads/main/AzadNet.txt",
    "https://raw.githubusercontent.com/STR97/STRUGOV/refs/heads/main/STR.BYPASS#STR.BYPASS%F0%9F%91%BE",
    "https://raw.githubusercontent.com/V2RayRoot/V2RayConfig/refs/heads/main/Config/vless.txt",
]

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URLS –¥–ª–∏–Ω–∞ 25
if len(URLS) < 25:
    raise SystemExit("ERROR: –æ–∂–∏–¥–∞–µ—Ç—Å—è 25 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Å–ø–∏—Å–∫–µ URLS")

# -------------------- SNI-–¥–æ–º–µ–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ 26-–≥–æ —Ñ–∞–π–ª–∞ --------------------
SNI_DOMAINS = [
    "stats.vk-portal.net", "sun6-21.userapi.com", "avatars.mds.yandex.net",
    "queuev4.vk.com", "sync.browser.yandex.net", "top-fwz1.mail.ru",
    "online.sberbank.ru", "ozone.ru", "vk.com", "www.wildberries.ru",
    "yandex.ru", "www.ozon.ru", "ok.ru", "www.ivi.ru", "hh.ru",
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –µ—â—ë
]

# -------------------- HTTP session with retries --------------------
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def build_session(max_pool_size=REQUESTS_POOL):
    s = requests.Session()
    adapter = HTTPAdapter(
        pool_connections=max_pool_size,
        pool_maxsize=max_pool_size,
        max_retries=Retry(total=RETRIES, backoff_factor=0.4,
                          status_forcelist=(429, 500, 502, 503, 504),
                          allowed_methods=frozenset(["GET", "HEAD"]))
    )
    s.mount("https://", adapter)
    s.mount("http://", adapter)
    s.headers.update({"User-Agent": CHROME_UA})
    return s

SESSION = build_session()

# -------------------- GitHub --------------------
if not GITHUB_TOKEN:
    raise SystemExit("ERROR: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MY_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ (GitHub token)")

g = Github(auth=Auth.Token(GITHUB_TOKEN))
repo = g.get_repo(REPO_NAME)

# -------------------- –£—Ç–∏–ª–∏—Ç—ã --------------------
def now_moscow():
    zone = zoneinfo.ZoneInfo("Europe/Moscow")
    return datetime.now(zone).strftime("%Y-%m-%d %H:%M")

def safe_filename(i: int):
    return f"{i}.txt"

def request_with_strategies(url: str) -> str:
    """
    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:
    1) HTTPS normal
    2) HTTPS verify=False
    3) HTTP
    4) Resolve host -> IP, request to ip with Host header (–ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ SNI)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –∏–Ω–∞—á–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    """
    # 1) https normal
    errors = []
    try:
        r = SESSION.get(url, timeout=TIMEOUT)
        r.raise_for_status()
        return r.text
    except Exception as e:
        errors.append(f"https normal: {e}")

    # 2) https verify=False
    try:
        r = SESSION.get(url, timeout=TIMEOUT, verify=False)
        r.raise_for_status()
        return r.text
    except Exception as e:
        errors.append(f"https verify=False: {e}")

    # 3) http (–∑–∞–º–µ–Ω–∞ https->http)
    try:
        parsed = urllib.parse.urlparse(url)
        if parsed.scheme == "https":
            url_http = parsed._replace(scheme="http").geturl()
            r = SESSION.get(url_http, timeout=TIMEOUT, verify=False)
            r.raise_for_status()
            return r.text
    except Exception as e:
        errors.append(f"http fallback: {e}")

    # 4) –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ IP —Å Host header
    try:
        parsed = urllib.parse.urlparse(url)
        host = parsed.hostname
        if host:
            try:
                ip = socket.gethostbyname(host)
            except Exception as e:
                raise Exception(f"DNS resolve failed: {e}")
            # —Å–æ–±–µ—Ä—ë–º –ø—É—Ç—å + query
            path = parsed.path or "/"
            if parsed.query:
                path += "?" + parsed.query
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –ø–æ IP (http first)
            for scheme in ("https", "http"):
                try_url = f"{scheme}://{ip}{path}"
                headers = {"Host": host}
                r = SESSION.get(try_url, timeout=TIMEOUT, headers=headers, verify=False)
                r.raise_for_status()
                return r.text
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî —É–ø–∞–¥—ë—Ç –Ω–∏–∂–µ
    except Exception as e:
        errors.append(f"ip+host attempt: {e}")

    raise Exception("All strategies failed: " + " | ".join(errors))

def save_local(path: str, content: str):
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)

def upload_file_if_changed(local_path: str, remote_path: str):
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, retry –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ SHA.
    """
    with open(local_path, "r", encoding="utf-8") as f:
        content = f.read()

    attempts = 5
    for attempt in range(1, attempts+1):
        try:
            try:
                existing = repo.get_contents(remote_path)
                remote_content = existing.decoded_content.decode("utf-8", errors="replace")
                if remote_content == content:
                    print(f"üîÑ {remote_path} ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return False
                # –æ–±–Ω–æ–≤–ª—è–µ–º
                repo.update_file(remote_path, f"Update {remote_path} | {now_moscow()}", content, existing.sha)
                print(f"‚úÖ {remote_path} –æ–±–Ω–æ–≤–ª—ë–Ω (update)")
                return True
            except GithubException as ge:
                # –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º
                status = getattr(ge, "status", None)
                if status == 404:
                    repo.create_file(remote_path, f"Add {remote_path} | {now_moscow()}", content)
                    print(f"‚úÖ {remote_path} —Å–æ–∑–¥–∞–Ω (create)")
                    return True
                else:
                    raise
        except GithubException as e_upd:
            # –∫–æ–Ω—Ñ–ª–∏–∫—Ç SHA –∏–ª–∏ –¥—Ä. –ø—Ä–æ–±–ª–µ–º—ã ‚Äî retry
            if getattr(e_upd, "status", None) == 409 and attempt < attempts:
                wait = 0.5 * (2 ** (attempt - 1))
                print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {remote_path}, –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{attempts}, –∂–¥—É {wait}s")
                time.sleep(wait)
                continue
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ GitHub –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {remote_path}: {e_upd}")
                return False
        except Exception as e:
            print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {remote_path}: {e}")
            return False
    return False

# -------------------- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ --------------------
def create_filtered_26():
    """
    –ß–∏—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã 1..25, —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ SNI_DOMAINS,
    —É–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã (—Å—Ç—Ä–æ–∫–∞ + host:port), –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç githubmirror/26.txt
    """
    collected = []
    for i in range(1, 26):
        p = os.path.join(LOCAL_DIR, f"{i}.txt")
        if not os.path.exists(p):
            continue
        try:
            with open(p, "r", encoding="utf-8", errors="ignore") as f:
                for line in f:
                    s = line.strip()
                    if not s: continue
                    # –µ—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –ª—é–±–æ–π SNI –¥–æ–º–µ–Ω ‚Äî –±–µ—Ä–µ–º
                    if any(d in s for d in SNI_DOMAINS):
                        collected.append(s)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {p}: {e}")

    # –£–¥–∞–ª–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    unique_full = list(dict.fromkeys(collected))

    # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç—è–Ω—É—Ç—å host:port –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ host:port
    hostport_set = set()
    final = []
    hostport_re = re.compile(r'(?P<host>(?:\d{1,3}\.){3}\d{1,3}|[A-Za-z0-9\-\._]+):(?P<port>\d{2,5})')
    for line in unique_full:
        hp = None
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å URI
        try:
            if "vmess://" in line:
                # vmess base64 json
                payload = line.split("vmess://", 1)[1].strip()
                try:
                    decoded = base64.b64decode(payload + "=" * (-len(payload) % 4)).decode("utf-8", errors="ignore")
                    j = json.loads(decoded)
                    host = j.get("add") or j.get("host") or j.get("ip")
                    port = j.get("port")
                    if host and port:
                        hp = f"{host}:{port}"
                except Exception:
                    hp = None
        except Exception:
            pass

        if not hp:
            m = hostport_re.search(line)
            if m:
                hp = f"{m.group('host')}:{m.group('port')}"

        if hp:
            key = hp.lower()
            if key in hostport_set:
                continue
            hostport_set.add(key)

        final.append(line)

    out_path = os.path.join(LOCAL_DIR, "26.txt")
    try:
        with open(out_path, "w", encoding="utf-8") as f:
            for ln in final:
                f.write(ln + "\n")
        print(f"üìÅ –°–æ–∑–¥–∞–Ω {out_path} ({len(final)} —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å {out_path}: {e}")
    return out_path

def main():
    updated = []
    # —Å–∫–∞—á–∏–≤–∞–µ–º 1..25
    for i, url in enumerate(URLS, start=1):
        filename = safe_filename(i)
        local_path = os.path.join(LOCAL_DIR, filename)
        remote_path = f"{LOCAL_DIR}/{filename}"

        print(f"--- {i}. {url}")
        try:
            text = request_with_strategies(url)
            # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º CRLF
            text = text.replace("\r\n", "\n")
            save_local(local_path, text)
            # –∑–∞–≥—Ä—É–∑–∫–∞ –≤ GitHub –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            changed = upload_file_if_changed(local_path, remote_path)
            if changed:
                updated.append((i, filename, url))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {url}: {e}")

    # —Å–æ–∑–¥–∞—ë–º 26-–π —Ñ–∞–π–ª —Å —Ñ–∏–ª—å—Ç—Ä–æ–º SNI –∏ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
    path26 = create_filtered_26()
    # –∑–∞–≥—Ä—É–∂–∞–µ–º 26
    upload_file_if_changed(path26, f"{LOCAL_DIR}/26.txt")

    # –æ–±–Ω–æ–≤–ª—è–µ–º README (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –≤—Å—Ç–∞–≤–ª—è–µ–º/–∑–∞–º–µ–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏)
    try:
        readme_path = "README.md"
        try:
            readme_file = repo.get_contents(readme_path)
            old_content = readme_file.decoded_content.decode("utf-8")
            sha = readme_file.sha
        except GithubException as ge:
            # –µ—Å–ª–∏ –Ω–µ—Ç README
            old_content = ""
            sha = None

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏
        ts = now_moscow()
        header = f"üïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {ts} (–ú–°–ö)\n\n"
        # –°–æ–±–µ—Ä—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ñ–∞–π–ª–æ–≤ –ø–æ updated)
        table_lines = ["| ‚Ññ | –§–∞–π–ª | –ò—Å—Ç–æ—á–Ω–∏–∫ | –í—Ä–µ–º—è |", "|--|--|--|--|"]
        # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ–Ω–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏–º 26)
        recent = updated[-10:] if updated else []
        # –¥–æ–±–∞–≤–∏–º 26 –≤ –Ω–∞—á–∞–ª–æ, —á—Ç–æ–±—ã –≤–∏–¥–Ω–æ –±—ã–ª–æ
        recent = [(26, "26.txt", "filtered SNI")] + recent
        for idx, fname, src in recent:
            raw = f"https://github.com/{REPO_NAME}/raw/refs/heads/main/{LOCAL_DIR}/{fname}"
            table_lines.append(f"| {idx} | [`{fname}`]({raw}) | {src} | {ts} |")

        new_table = header + "\n".join(table_lines) + "\n\n"

        # –ï—Å–ª–∏ README –µ—Å—Ç—å ‚Äî –∑–∞–º–µ–Ω–∏–º –±–ª–æ–∫ –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ)
        if old_content:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –±–ª–æ–∫ "üïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:" –µ—Å–ª–∏ –µ—Å—Ç—å
            if "üïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:" in old_content:
                new_content = re.sub(r"üïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:.*?(?:\n\n|$)", new_table, old_content, flags=re.S)
            else:
                new_content = new_table + old_content
        else:
            new_content = "# VPN-KEY-VLESS\n\n" + new_table

        # –ó–∞–ø–∏—à–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        if sha:
            repo.update_file(readme_path, f"Update README | {ts}", new_content, sha)
            print("üìÑ README.md –æ–±–Ω–æ–≤–ª—ë–Ω (update)")
        else:
            repo.create_file(readme_path, f"Create README | {ts}", new_content)
            print("üìÑ README.md —Å–æ–∑–¥–∞–Ω (create)")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ README: {e}")

if __name__ == "__main__":
    main()





